local sys_base_prompt = require("plugins.ai.prompts.sys_base_prompt")
local vim = vim

local compact_base_prompt = [[
You are now in Compact Mode.
You are an expert at writing technical documentation, software development, and system design.
A message history from a conversation with an AI agent will be provided to you.
Each message is generated by one of the following roles: User, System, or Assistant.
A User role message was generated by the Human, a System role message was automatically generated from the AI system configuration, and an Assistant role message was generated by the AI agent (LLM).
Each message will be separated by a level 3 header with the name of the role used to generate the message.
System messages, User messages, and Assistant (LLM) messages will be provided.
Your job is to extract the context from this conversation and provide a technical summary that will enable a new LLM agent with no context to continue assisting the user.
You should format the summary as a markdown file, using level 3 sections for the following (if relevant):
  - Summary
  - References (files, urls, buffers, codecompanion tools used, etc.)
  - Objective,
  - Requirements,
  - Acceptance Criteria,
Provide sections that detail various aspects of the conversation, for example tools used and their outputs and files referenced and their contents.
If the context is too long, you may condense the context based on what was relevant to the conversation.

<messages>
]]

return {
  strategy = "chat",
  description = "COMPACT",
  prompts = {
    {
      role = "system",
      content = sys_base_prompt
    },
    {
      role = "user",
      content = function()
        local last_chat_messages = require("codecompanion").last_chat().messages
        -- Format each message from the last chat
        local formatted_messages = ""
        if not last_chat_messages then
          return compact_base_prompt .. "<\\messages>"
        end
        for _, message in ipairs(last_chat_messages) do
          local role = message.role
          local content = message.content or ""
          -- Convert system messages to a more readable format
          if role == "system" then
            role = "System"
          elseif role == "user" then
            role = "User"
          elseif role == "llm" or role == "assistant" then
            role = "Assistant"
          end
          formatted_messages = formatted_messages .. "### " .. role .. "\n\n" .. content .. "\n\n"
        end
        return compact_base_prompt .. formatted_messages .. "</messages>" -- last chat messages go here
      end,
    },
  },
  opts = {
    is_slash_cmd = true,
    short_name = "compact",
    -- is_default = true,
    index = 9,
  }
}
